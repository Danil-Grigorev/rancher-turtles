name: release

on:
  workflow_dispatch:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  PROD_REGISTRY: registry.rancher.com
  PROD_USERNAME: rancher

permissions:
  contents: write # Allow to create a release.

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: write
    strategy:
      matrix:
        destination: [ghcr] # [ghcr, prod]
        arch: [amd64, arm64, s390x]
        org: [danil-grigorev] # [rancher-sandbox]
        include:
        - destination: ghcr
          tag: ${{ github.ref_name }}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: GITHUB_TOKEN
        # - destination: prod
        #   tag: ${{ github.ref_name }}
        #   registry: registry.rancher.com
        #   username: rancher
        #   password: REGISTRY_PASSWORD
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: setupGo
      uses: actions/setup-go@v4
      with:
        go-version: '=1.20.7'
    - name: Docker login to ghcr registry
      uses: docker/login-action@v3
      with:
        registry: ${{ matrix.registry }}
        username: ${{ matrix.username }}
        password: ${{ secrets[matrix.password] }}
    # - name: Build docker image for gh registry
    #   run: make docker-build-${{ matrix.arch }} TAG=${{ matrix.tag }} REGISTRY=${{ matrix.registry }} ORG=${{ matrix.org }}
    # - name: Push docker image to gh registry
    #   run: make docker-push-${{ matrix.arch }} TAG=${{ matrix.tag }} REGISTRY=${{ matrix.registry }} ORG=${{ matrix.org }}
    - name: Store image and digest
      id: image_info
      run: |
        img=${{ matrix.registry }}/${{ matrix.org }}/rancher-turtles-${{ matrix.arch }}:${{ matrix.tag }}
        docker pull $img
        out=$( docker buildx imagetools inspect ${img} --format '{{json .}}' )
        digest=$( echo $out | jq .manifest.digest )
        echo "digest=${digest}" >> $GITHUB_OUTPUT
        echo "image=${img}" >> $GITHUB_OUTPUT
        echo "image_name=${img%:*}" >> $GITHUB_OUTPUT
    - uses: cloudposse/github-action-matrix-outputs-write@main
      id: out
      with:
        matrix-step-name: ${{ github.job }}
        matrix-key: ${{ matrix.arch }}
        outputs: |-
          image: ${{ steps.image_info.outputs.image_name }}
          digest: ${{ steps.image_info.outputs.digest }}
          username: ${{ matrix.username }}
          password: ${{ matrix.password }}
          registry: ${{ matrix.registry }}

  build-result:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: build

    outputs:
      result: "${{ steps.read.outputs.result }}"  

  sign:
    runs-on: ubuntu-latest
    needs: [build-result]
    permissions:
      actions: read 
      id-token: write
      packages: write
    strategy:
      matrix:
        destination: [ghcr]
        arch: [amd64, arm64, s390x]
    env:
      key: ${{ matrix.destination }}-${{ matrix.arch}}
      data: ${{ needs.build-result.outputs.result }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Sign image with cosign
      uses: ./.github/workflows/release_sign
      with:
        image: ${{ fromJson(env.data).image[matrix.arch] }}
        digest: ${{ fromJson(env.data).digest[matrix.arch] }}
        identity: https://github.com/rancher-sandbox/rancher-turtles/.github/workflows/release.yaml@refs/tags/${{ env.TAG }}
        oids-issuer: https://token.actions.githubusercontent.com
        registry: ${{ fromJson(env.data).registry[matrix.arch] }}
        username: ${{ fromJson(env.data).username[matrix.arch] }}
        password: ${{ secrets[fromJson(env.data).password[matrix.arch]] }}

  # sign:
  #   needs: [build]
  #   permissions:
  #     actions: read 
  #     id-token: write
  #     packages: write
  #   strategy:
  #     matrix:
  #       arch: [amd64, arm64, s390x]
  #   uses: ./.github/workflows/release_sign
  #   secrets: inherit
  #   with:
  #     image: ${{ steps.image_info.outputs.image_name }}
  #     digest: ${{ steps.image_info.outputs.digest }}
  #     identity: https://github.com/rancher-sandbox/rancher-turtles/.github/workflows/release.yaml@refs/tags/${{ env.TAG }}
  #     oids-issuer: https://token.actions.githubusercontent.com
  #     username: ${{ matrix.username }}
  #     password: ${{ matrix.password }}
    # uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    # with:
    #   image: ${{ matrix.images.image }}
    #   digest: ${{ matrix.images.digest }}
    # secrets:
    #   registry-username: ${{ github.actor }}
    #   registry-password: ${{ secrets.GITHUB_TOKEN }}

  # build-prod:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   outputs:
  #     multiarch_digest: ${{ steps.prod-images.outputs.multiarch_digest }}
  #     amd64_digest: ${{ steps.prod-images.outputs.amd64_digest }}
  #     arm64_digest: ${{ steps.prod-images.outputs.arm64_digest }}
  #     s390x_digest: ${{ steps.prod-images.outputs.s390x_digest }}
  #     multiarch_image_name: ${{ steps.prod-images.outputs.multiarch_image_name }}
  #     amd64_image_name: ${{ steps.prod-images.outputs.amd64_image_name }}
  #     arm64_image_name: ${{ steps.prod-images.outputs.arm64_image_name }}
  #     s390x_image_name: ${{ steps.prod-images.outputs.s390x_image_name }}
  #   env:
  #     TAG: ${{ github.ref_name }}
  #     PROD_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  #     PROD_ORG: rancher-sandbox
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #   - name: setupGo
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '=1.20.7'
  #   - name: Docker login to prod registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.PROD_REGISTRY }}
  #       username: ${{ env.PROD_USERNAME }}
  #       password: ${{ env.PROD_PASSWORD }}
  #   - name: Build docker image for prod registry
  #     run: make docker-build-all TAG=${{ env.TAG }} REGISTRY=${{ env.PROD_REGISTRY }} ORG=${{ env.PROD_ORG }}
  #   - name: Push docker image to prod registry
  #     run: make docker-push-all TAG=${{ env.TAG }} REGISTRY=${{ env.PROD_REGISTRY }} ORG=${{ env.PROD_ORG }}
  #   - name: Store list of prod images and digests
  #     id: prod-images
  #     run: |
  #       ./scripts/image-digest.sh ${{ env.PROD_REGISTRY }} ${{ env.PROD_ORG }} ${{ env.TAG }}

  # prod-sign:
  #   runs-on: ubuntu-latest
  #   needs: [build-prod]
  #   permissions:
  #     packages: write
  #     id-token: write
  #   strategy:
  #     matrix:
  #       images: [
  #         {
  #             "image":"${{ needs.build-prod.outputs.multiarch_image_name }}",
  #             "digest":"${{ needs.build-prod.outputs.multiarch_digest }}"
  #         },
  #         {
  #             "image":"${{ needs.build-prod.outputs.amd64_image_name }}",
  #             "digest":"${{ needs.build-prod.outputs.amd64_digest }}"
  #         },
  #         {
  #             "image":"${{ needs.build-prod.outputs.arm64_image_name }}",
  #             "digest":"${{ needs.build-prod.outputs.arm64_digest }}"
  #         },
  #         {
  #             "image":"${{ needs.build-prod.outputs.s390x_image_name }}",
  #             "digest":"${{ needs.build-prod.outputs.s390x_digest }}"
  #         }
  #       ]
  #   env:
  #     TAG: ${{ github.ref_name }}
  #     PROD_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  #   steps:
  #     - name: Docker login to prod registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.PROD_REGISTRY }}
  #         username: ${{ env.PROD_USERNAME }}
  #         password: ${{ env.PROD_PASSWORD }}
  #     - uses: sigstore/cosign-installer@v3.1.2
  #     - name: Sign manifests
  #       env:
  #         COSIGN_EXPERIMENTAL: 1
  #       run: |
  #         cosign sign --yes ${{ matrix.images.image }}@${{ matrix.images.digest }}
  #     - name: Verify pushed ghcr images
  #       env:
  #         COSIGN_EXPERIMENTAL: 1
  #       run: |
  #         cosign verify ${{ matrix.images.image }}@${{ matrix.images.digest }} --certificate-identity=https://github.com/rancher-sandbox/rancher-turtles/.github/workflows/release.yaml@refs/tags/${{ env.TAG }} --certificate-oidc-issuer=https://token.actions.githubusercontent.com

  # prod-provenance:
  #   needs: [build-prod, prod-sign]
  #   permissions:
  #     actions: read
  #     id-token: write
  #     packages: write
  #   strategy:
  #     matrix:
  #       images: [
  #         {
  #             "image":"${{ needs.build-prod.outputs.multiarch_image_name }}",
  #             "digest":"${{ needs.build-prod.outputs.multiarch_digest }}"
  #         },
  #         {
  #             "image":"${{ needs.build-prod.outputs.amd64_image_name }}",
  #             "digest":"${{ needs.build-prod.outputs.amd64_digest }}"
  #         },
  #         {
  #             "image":"${{ needs.build-prod.outputs.arm64_image_name }}",
  #             "digest":"${{ needs.build-prod.outputs.arm64_digest }}"
  #         },
  #         {
  #             "image":"${{ needs.build-prod.outputs.s390x_image_name }}",
  #             "digest":"${{ needs.build-prod.outputs.s390x_digest }}"
  #         }
  #       ]
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
  #   with:
  #     image: ${{ matrix.images.image }}
  #     digest: ${{ matrix.images.digest }}
  #   secrets:
  #     registry-username: ${{ env.PROD_USERNAME }}
  #     registry-password: ${{ secrets.REGISTRY_PASSWORD }}

  # release:
  #   name: Create helm release
  #   needs: [prod-provenance, ghcr-provenance]
  #   runs-on: ubuntu-latest
  #   env:
  #     TAG: ${{ github.ref_name }}
  #     PROD_ORG: rancher-sandbox
  #     RELEASE_DIR: .cr-release-packages
  #     CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Configure Git
  #       run: |
  #         git config user.name "$GITHUB_ACTOR"
  #         git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

  #     - name: Package operator chart
  #       run: RELEASE_TAG=${GITHUB_REF##*/} CHART_PACKAGE_DIR=${RELEASE_DIR} REGISTRY=${{ env.PROD_REGISTRY }} ORG=${{ env.PROD_ORG }} make release

  #     - name: Install chart-releaser
  #       uses: helm/chart-releaser-action@v1.5.0
  #       with:
  #         install_only: true

  #     - name: Prepare environment for the chart releaser
  #       run: |
  #         echo "CR_OWNER=$(cut -d '/' -f 1 <<< $GITHUB_REPOSITORY)" >> $GITHUB_ENV
  #         echo "CR_GIT_REPO=$(cut -d '/' -f 2 <<< $GITHUB_REPOSITORY)" >> $GITHUB_ENV
  #         rm -rf .cr-index
  #         mkdir -p .cr-index

  #     - name: Run chart-releaser upload
  #       run: cr upload --skip-existing -c "$(git rev-parse HEAD)" --generate-release-notes --release-name-template "${{ env.TAG }}" --make-release-latest=false

  #     - name: Run chart-releaser index
  #       run: cr index --push --release-name-template "${{ env.TAG }}"
